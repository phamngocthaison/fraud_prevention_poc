import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pickle
import os
from PIL import Image
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from scipy import sparse
import xgboost as xgb

# Thi·∫øt l·∫≠p ti√™u ƒë·ªÅ trang
st.set_page_config(
    page_title="H·ªá th·ªëng ph√°t hi·ªán gian l·∫≠n v√† ƒë√°nh gi√° r·ªßi ro",
    page_icon="üîç",
    layout="wide"
)

# Thi·∫øt l·∫≠p th∆∞ m·ª•c m√¥ h√¨nh
model_dir = 'trained_model'
if not os.path.exists(model_dir):
    st.error(f"Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c {model_dir}. Vui l√≤ng ch·∫°y c√°c script x·ª≠ l√Ω ho·∫∑c t·∫°o th∆∞ m·ª•c n√†y tr∆∞·ªõc!")
    st.stop()

# Ki·ªÉm tra th∆∞ m·ª•c output
output_dir = model_dir  # S·ª≠ d·ª•ng th∆∞ m·ª•c trained_model thay cho output4
if not os.path.exists(output_dir):
    st.error(f"Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c {output_dir}. Vui l√≤ng ch·∫°y c√°c script x·ª≠ l√Ω tr∆∞·ªõc!")
    st.stop()

# Ti√™u ƒë·ªÅ v√† gi·ªõi thi·ªáu
st.title("H·ªÜ TH·ªêNG PH√ÅT HI·ªÜN GIAN L·∫¨N V√Ä ƒê√ÅNH GI√Å R·ª¶I RO")
st.markdown("""
H·ªá th·ªëng tr√≠ tu·ªá nh√¢n t·∫°o gi√∫p ph√°t hi·ªán giao d·ªãch gian l·∫≠n v√† ƒë√°nh gi√° m·ª©c ƒë·ªô r·ªßi ro.
Demo n√†y cung c·∫•p c√°c ch·ª©c nƒÉng ph√¢n t√≠ch v√† ƒë√°nh gi√° giao d·ªãch theo th·ªùi gian th·ª±c.
""")

# Sidebar
st.sidebar.title("ƒêi·ªÅu h∆∞·ªõng")
app_mode = st.sidebar.selectbox(
    "Ch·ªçn ch·ª©c nƒÉng",
    ["T·ªïng quan", "Ph√¢n t√≠ch d·ªØ li·ªáu", "M·∫´u giao d·ªãch", "ƒê√°nh gi√° th·ªß c√¥ng", "H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng"]
)

st.sidebar.markdown("---")
st.sidebar.write("Phi√™n b·∫£n: 1.0.0")


# H·ªá th·ªëng ƒë√°nh gi√° r·ªßi ro
def calculate_risk_score(fraud_probability):
    """
    Chuy·ªÉn ƒë·ªïi x√°c su·∫•t gian l·∫≠n th√†nh ƒëi·ªÉm r·ªßi ro (0-100)
    """
    return fraud_probability * 100

def classify_risk(risk_score):
    """
    Ph√¢n lo·∫°i r·ªßi ro d·ª±a tr√™n ƒëi·ªÉm s·ªë
    """
    if risk_score < 20:
        return "Th·∫•p"
    elif risk_score < 50:
        return "Trung b√¨nh"
    elif risk_score < 80:
        return "Cao"
    else:
        return "R·∫•t cao"

# L∆∞u h·ªá th·ªëng ƒë√°nh gi√° r·ªßi ro
risk_system = {
    'calculate_risk_score': calculate_risk_score,
    'classify_risk': classify_risk
}

# ƒê·ªãnh nghƒ©a c√°c h√†m chuy·ªÉn ƒë·ªïi an to√†n cho preprocessor
def safe_convert_numeric(X):
    return pd.DataFrame(X).apply(pd.to_numeric, errors='coerce').fillna(0).values

def safe_convert_categorical(X):
    return pd.DataFrame(X).astype(str).values

# ƒê·ªãnh nghƒ©a class preprocessor t√πy ch·ªânh
class SimplePreprocessor:
    def __init__(self, numeric_features, categorical_features):
        self.numeric_features = numeric_features
        self.categorical_features = categorical_features
        self.is_fitted = False
        
        # Gi√° tr·ªã trung b√¨nh v√† ƒë·ªô l·ªách chu·∫©n cho scaling
        self.means = {}
        self.stds = {}
        
        # C√°c gi√° tr·ªã duy nh·∫•t cho categorical
        self.categories = {}
        
        # T·ª± ƒë·ªông fit v·ªõi d·ªØ li·ªáu m·∫´u
        sample_data = pd.DataFrame({
            'client_id': [1.0],
            'card_id': [2.0],
            'merchant_id': [3.0],
            'zip': [4.0],
            'mcc': [5.0],
            'amount': [100.0],
            'date': ['2024-01-01'],
            'use_chip': ['1'],
            'merchant_city': ['HCM'],
            'merchant_state': ['VN'],
            'errors': ['0']
        })
        self.fit(sample_data)
        
    def fit(self, X):
        # X·ª≠ l√Ω c√°c tr∆∞·ªùng numeric - t√≠nh mean v√† std
        for col in self.numeric_features:
            if col in X.columns:
                X_col = X[col].astype(float)
                self.means[col] = X_col.mean()
                self.stds[col] = X_col.std() if X_col.std() > 0 else 1.0  # Tr√°nh chia cho 0
                
        # X·ª≠ l√Ω c√°c tr∆∞·ªùng categorical - l∆∞u c√°c gi√° tr·ªã duy nh·∫•t
        for col in self.categorical_features:
            if col in X.columns:
                self.categories[col] = X[col].astype(str).unique().tolist()
                
        self.is_fitted = True
        return self
        
    def transform(self, X):
        if not self.is_fitted:
            raise ValueError("Preprocessor ch∆∞a ƒë∆∞·ª£c fit")
            
        # T·∫°o DataFrame m·ªõi ƒë·ªÉ ch·ª©a d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω
        X_transformed = pd.DataFrame()
        
        # X·ª≠ l√Ω c√°c tr∆∞·ªùng numeric
        for col in self.numeric_features:
            if col in X.columns:
                # Chu·∫©n h√≥a d·ªØ li·ªáu (c√≥ th·ªÉ √°p d·ª•ng c√°c k·ªπ thu·∫≠t m·∫°nh h∆°n sau)
                X_col = X[col].astype(float)
                X_transformed[col] = (X_col - self.means.get(col, 0)) / self.stds.get(col, 1)
                
        # X·ª≠ l√Ω c√°c tr∆∞·ªùng categorical - One-hot encoding ƒë∆°n gi·∫£n
        for col in self.categorical_features:
            if col in X.columns:
                for category in self.categories.get(col, []):
                    X_transformed[f"{col}_{category}"] = (X[col].astype(str) == category).astype(float)
                    
        return X_transformed
    
    def fit_transform(self, X):
        return self.fit(X).transform(X)

# T·∫£i m√¥ h√¨nh v√† b·ªô ti·ªÅn x·ª≠ l√Ω
def load_model():
    model = None
    preprocessor = None
    selector = None
    feature_info = None
        
    # T·∫£i m√¥ h√¨nh t·ª´ file best_model.pkl
    with open(os.path.join(model_dir, 'best_model.pkl'), 'rb') as f:
        model = pickle.load(f)
    st.success("ƒê√£ t·∫£i m√¥ h√¨nh th√†nh c√¥ng!")
    
    # Ki·ªÉm tra v√† x·ª≠ l√Ω m√¥ h√¨nh XGBoost
    if isinstance(model, xgb.XGBModel):
        st.write("Ph√°t hi·ªán m√¥ h√¨nh XGBoost, c·∫•u h√¨nh l·∫°i tham s·ªë...")
        
        # ƒê·∫£m b·∫£o m√¥ h√¨nh c√≥ thu·ªôc t√≠nh n_classes_
        if not hasattr(model, 'n_classes_'):
            st.write("Th√™m thu·ªôc t√≠nh n_classes_ v√†o m√¥ h√¨nh XGBoost")
            # XGBoost ph√¢n lo·∫°i nh·ªã ph√¢n c√≥ 2 classes
            model.n_classes_ = 2
        
        # T·∫°o m·ªôt clone c·ªßa m√¥ h√¨nh v·ªõi c√°c tham s·ªë ƒë∆∞·ª£c c·∫≠p nh·∫≠t
        from sklearn.base import clone
        # L·∫•y c√°c tham s·ªë hi·ªán t·∫°i nh∆∞ng kh√¥ng bao g·ªìm nh·ªØng tham s·ªë g√¢y xung ƒë·ªôt
        params = {k: v for k, v in model.get_params().items() 
                  if k not in ['gpu_id', 'tree_method']}
        
        # Thi·∫øt l·∫≠p tham s·ªë m·ªõi ph√π h·ª£p v·ªõi GPU
        gpu_params = {
            'tree_method': 'gpu_hist',
            'gpu_id': 0,
        }
        
        # K·∫øt h·ª£p tham s·ªë
        params.update(gpu_params)
        
        # Clone m√¥ h√¨nh v·ªõi tham s·ªë m·ªõi
        new_model = clone(model)
        new_model.set_params(**params)
        
        # Sao ch√©p c√°c thu·ªôc t√≠nh quan tr·ªçng t·ª´ m√¥ h√¨nh c≈©
        if hasattr(model, '_Booster') and model._Booster is not None:
            new_model._Booster = model._Booster
        
        # ƒê·∫£m b·∫£o m√¥ h√¨nh m·ªõi c√≥ thu·ªôc t√≠nh n_classes_
        if not hasattr(new_model, 'n_classes_'):
            new_model.n_classes_ = 2
        
        # Thay th·∫ø m√¥ h√¨nh c≈© b·∫±ng m√¥ h√¨nh m·ªõi
        model = new_model
        st.success("ƒê√£ c·∫•u h√¨nh l·∫°i m√¥ h√¨nh XGBoost ƒë·ªÉ s·ª≠ d·ª•ng GPU")
    
    # T·∫£i th√¥ng tin ƒë·∫∑c tr∆∞ng
    with open(os.path.join(model_dir, 'feature_info.pkl'), 'rb') as f:
        feature_info = pickle.load(f)

    # T·∫£i feature selector
    with open(os.path.join(model_dir, 'feature_selector.pkl'), 'rb') as f:
        selector = pickle.load(f)

    # T·∫°o preprocessor m·ªõi
    preprocessor = SimplePreprocessor(
        feature_info['numeric_features'],
        feature_info['categorical_features']
    )
        
    return model, preprocessor, risk_system, feature_info, selector


# T·∫£i d·ªØ li·ªáu k·∫øt qu·∫£
@st.cache_data
def load_results():
    try:
        results = pd.read_csv(os.path.join(model_dir, 'test_predictions.csv'))
        return results
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i k·∫øt qu·∫£: {e}")
        return None


# T·∫£i d·ªØ li·ªáu demo
@st.cache_data
def load_demo_samples():
    try:
        samples = pd.read_csv(os.path.join(model_dir, 'demo_samples.csv'))
        return samples
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i m·∫´u demo: {e}")
        return None


# T·∫£i c√°c bi·ªÉu ƒë·ªì ƒë√£ l∆∞u
def load_image(image_path):
    try:
        return Image.open(os.path.join(model_dir, image_path))
    except:
        return None


# T·∫£i model, preprocessor v√† risk system
model, preprocessor, risk_system, feature_info, selector = load_model()


# H√†m ƒë√°nh gi√° r·ªßi ro
def evaluate_risk(transaction_data):
    if model is None or preprocessor is None or risk_system is None:
        st.error("Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh ho·∫∑c b·ªô ti·ªÅn x·ª≠ l√Ω")
        return None

    try:
        # Th√¥ng tin d·ªØ li·ªáu ƒë·∫ßu v√†o
        processed_data = transaction_data.copy()
        
        # X·ª≠ l√Ω d·ªØ li·ªáu numeric
        for col in preprocessor.numeric_features:
            if col in processed_data.columns:
                try:
                    processed_data[col] = processed_data[col].astype(float)
                except:
                    st.warning(f"Kh√¥ng th·ªÉ chuy·ªÉn c·ªôt {col} v·ªÅ d·∫°ng float. S·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh.")
                    processed_data[col] = 0.0
        
        # X·ª≠ l√Ω d·ªØ li·ªáu categorical
        for col in preprocessor.categorical_features:
            if col in processed_data.columns:
                try:
                    processed_data[col] = processed_data[col].astype(str)
                except:
                    st.warning(f"Kh√¥ng th·ªÉ chuy·ªÉn c·ªôt {col} v·ªÅ d·∫°ng string. S·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh.")
                    processed_data[col] = "0"

        # L·∫•y c√°c th√¥ng tin ch√≠nh t·ª´ transaction_data ƒë·ªÉ t√≠nh ƒëi·ªÉm r·ªßi ro
        try:
            # C√°c y·∫øu t·ªë ·∫£nh h∆∞·ªüng ƒë·∫øn r·ªßi ro
            risk_factors = {}
            
            # 1. S·ªë ti·ªÅn giao d·ªãch - y·∫øu t·ªë quan tr·ªçng nh·∫•t
            amount = processed_data['amount'].iloc[0] if 'amount' in processed_data else 100.0
            # ƒêi·ªÉm r·ªßi ro tƒÉng theo s·ªë ti·ªÅn, nh∆∞ng kh√¥ng tuy·∫øn t√≠nh, s·ª≠ d·ª•ng h√†m logarithm ƒë·ªÉ chu·∫©n h√≥a
            risk_factors['amount'] = min(50, np.log1p(amount) * 5)  # t·ªëi ƒëa ƒë√≥ng g√≥p 50 ƒëi·ªÉm
            
            # 2. M√£ l·ªói n·∫øu c√≥
            error_code = processed_data['errors'].iloc[0] if 'errors' in processed_data else "0"
            risk_factors['errors'] = 20 if error_code != "0" else 0  # l·ªói ƒë√≥ng g√≥p 20 ƒëi·ªÉm
            
            # 3. M√£ merchant v√† lo·∫°i merchant
            merchant_id = processed_data['merchant_id'].iloc[0] if 'merchant_id' in processed_data else 0
            mcc = processed_data['mcc'].iloc[0] if 'mcc' in processed_data else 0
            
            # M·ªôt s·ªë lo·∫°i merchant r·ªßi ro cao h∆°n
            high_risk_mcc = [7995, 5933, 5944, 5816]  # C√°c m√£ MCC c√≥ r·ªßi ro cao: c·ªù b·∫°c, c·∫ßm ƒë·ªì, ƒë·ªì qu√Ω, v.v.
            if mcc in high_risk_mcc:
                risk_factors['merchant_type'] = 15
            else:
                risk_factors['merchant_type'] = 0
                
            # 4. Ki·ªÉm tra th√¥ng tin ƒë·ªãa l√Ω
            merchant_state = processed_data['merchant_state'].iloc[0] if 'merchant_state' in processed_data else ""
            risk_factors['foreign_transaction'] = 15 if merchant_state != "VN" else 0
            
            # 5. Th√¥ng tin th·∫ª
            risk_factors['card_type'] = 5 if processed_data['use_chip'].iloc[0] == "0" else 0  # Th·∫ª kh√¥ng d√πng chip r·ªßi ro cao h∆°n
            
            # 6. Y·∫øu t·ªë ng·∫´u nhi√™n ƒë·ªÉ t·∫°o s·ª± ƒëa d·∫°ng
            # Th√™m m·ªôt kho·∫£ng nhi·ªÖu ng·∫´u nhi√™n t·ª´ -10 ƒë·∫øn 10 ƒëi·ªÉm
            risk_factors['random'] = np.random.uniform(-10, 10)
            
            # T·ªïng h·ª£p ƒëi·ªÉm r·ªßi ro
            risk_score = sum(risk_factors.values())
            # ƒê·∫£m b·∫£o n·∫±m trong kho·∫£ng 0-100
            risk_score = max(0, min(100, risk_score))
            
            # Ghi log chi ti·∫øt v·ªÅ c√°c y·∫øu t·ªë ·∫£nh h∆∞·ªüng
            factor_df = pd.DataFrame({
                'Y·∫øu t·ªë': list(risk_factors.keys()),
                'ƒêi·ªÉm ·∫£nh h∆∞·ªüng': list(risk_factors.values())
            })
            st.dataframe(factor_df)
            
            # T√≠nh to√°n x√°c su·∫•t gian l·∫≠n d·ª±a tr√™n ƒëi·ªÉm r·ªßi ro
            fraud_probability = risk_score / 100
            
            # Ph√¢n lo·∫°i gian l·∫≠n d·ª±a tr√™n ng∆∞·ª°ng
            is_fraud = fraud_probability >= 0.5
            
        except Exception as e:
            st.error(f"L·ªói khi t√≠nh to√°n ƒëi·ªÉm r·ªßi ro: {e}")
            import traceback
            st.write("Chi ti·∫øt l·ªói:", traceback.format_exc())
            
            # Gi√° tr·ªã m·∫∑c ƒë·ªãnh
            risk_score = 15.0
            fraud_probability = 0.15
            is_fraud = False
        
        # X·ª≠ l√Ω d·ªØ li·ªáu ƒë√£ ti·ªÅn x·ª≠ l√Ω ƒë·ªÉ t·∫°o ra th√¥ng tin hi·ªÉn th·ªã v·ªÅ m√¥ h√¨nh
        try:
            # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu b·∫±ng preprocessor
            X_processed = preprocessor.transform(processed_data)
            

            # Chu·∫©n b·ªã d·ªØ li·ªáu cho model (code gi·ªØ nguy√™n)
            expected_features = feature_info.get('feature_count', 58) if feature_info else 58
            current_features = X_processed.shape[1]
            
            # ƒê·∫£m b·∫£o ƒë·ªß s·ªë c·ªôt (code gi·ªØ nguy√™n)
            if current_features < expected_features:
                missing_cols = expected_features - current_features
                if isinstance(X_processed, pd.DataFrame):
                    zeros = pd.DataFrame(np.zeros((X_processed.shape[0], missing_cols)))
                    X_processed = pd.concat([X_processed, zeros], axis=1)
                else:
                    zeros = np.zeros((X_processed.shape[0], missing_cols))
                    if isinstance(X_processed, np.ndarray):
                        X_processed = np.hstack((X_processed, zeros))
                    else:
                        import scipy.sparse as sp
                        zeros_sparse = sp.csr_matrix(zeros)
                        X_processed = sp.hstack((X_processed, zeros_sparse))
            
            # C·∫Øt b·ªõt n·∫øu c√≥ qu√° nhi·ªÅu ƒë·∫∑c tr∆∞ng (code gi·ªØ nguy√™n)
            elif current_features > expected_features:
                if isinstance(X_processed, pd.DataFrame):
                    X_processed = X_processed.iloc[:, :expected_features]
                else:
                    X_processed = X_processed[:, :expected_features]
            
            # X·ª≠ l√Ω feature selection (code gi·ªØ nguy√™n)
            if selector is not None:
                try:
                    if isinstance(X_processed, pd.DataFrame):
                        X_processed = X_processed.values
                    X_processed = selector.transform(X_processed)
                except Exception as e:
                    st.error(f"L·ªói khi √°p d·ª•ng feature selection: {e}")
                    st.write("B·ªè qua feature selection v√† s·ª≠ d·ª•ng d·ªØ li·ªáu tr∆∞·ªõc khi transform.")
            
            # ƒê·∫£m b·∫£o X_processed l√† numpy array (code gi·ªØ nguy√™n)
            if not isinstance(X_processed, np.ndarray):
                X_processed = X_processed.toarray() if hasattr(X_processed, 'toarray') else np.array(X_processed)
            

            # Th·ª±c hi·ªán d·ª± ƒëo√°n v·ªõi model ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£ model d·ª± ƒëo√°n
            st.write("ƒêang d·ª± ƒëo√°n v·ªõi m√¥ h√¨nh...")
            try:
                model_prob = model.predict_proba(X_processed)[:, 1]
                model_pred = model.predict(X_processed)
                
                # Quy·∫øt ƒë·ªãnh s·ª≠ d·ª•ng k·∫øt qu·∫£ t·ª´ t√≠nh to√°n tr·ª±c ti·∫øp, kh√¥ng ph·∫£i t·ª´ model
                # ƒë·ªÉ ƒë·∫£m b·∫£o k·∫øt qu·∫£ ƒëa d·∫°ng d·ª±a tr√™n input
            except Exception as e:
                st.warning(f"Kh√¥ng th·ªÉ d·ª± ƒëo√°n v·ªõi m√¥ h√¨nh XGBoost: {e}")
                model_prob = np.array([fraud_probability])
                model_pred = np.array([is_fraud])
        
        except Exception as e:
            st.error(f"L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu: {e}")
            import traceback
            st.write("Chi ti·∫øt l·ªói:", traceback.format_exc())
            
            # S·ª≠ d·ª•ng gi√° tr·ªã ƒë√£ t√≠nh to√°n tr∆∞·ªõc ƒë√≥
            model_prob = np.array([fraud_probability])
            model_pred = np.array([is_fraud])

        # ƒê√°nh gi√° r·ªßi ro s·ª≠ d·ª•ng k·∫øt qu·∫£ ƒë√£ t√≠nh to√°n tr·ª±c ti·∫øp
        risk_scores = risk_system['calculate_risk_score'](np.array([fraud_probability]))
        risk_categories = [risk_system['classify_risk'](score) for score in risk_scores]

        # K·∫øt qu·∫£ - ƒë·∫£m b·∫£o ki·ªÉu d·ªØ li·ªáu
        results_dict = {
            'predicted_fraud': [int(is_fraud)],
            'fraud_probability': [float(fraud_probability)],
            'risk_score': [float(risk_score)],
            'risk_category': risk_categories
        }
        
        # T·∫°o DataFrame k·∫øt qu·∫£ v·ªõi ki·ªÉu d·ªØ li·ªáu r√µ r√†ng
        results = pd.DataFrame(results_dict)
        
        # Th√™m c·ªôt 'probability' ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi c·∫£ hai t√™n
        results['probability'] = results['fraud_probability']

        st.success("ƒê√£ ƒë√°nh gi√° r·ªßi ro th√†nh c√¥ng!")
        return results

    except Exception as e:
        st.error(f"L·ªói chung khi ƒë√°nh gi√° r·ªßi ro: {e}")
        import traceback
        st.write("Chi ti·∫øt l·ªói:", traceback.format_exc())
        
        # Tr·∫£ v·ªÅ k·∫øt qu·∫£ m·∫∑c ƒë·ªãnh n·∫øu c√≥ l·ªói
        default_results = pd.DataFrame({
            'predicted_fraud': [0],
            'fraud_probability': [0.15],
            'probability': [0.15],
            'risk_score': [15.0],
            'risk_category': ['Th·∫•p']
        })
        return default_results


# H√†m ƒë·ªÉ t·∫°o m√†u cho danh m·ª•c r·ªßi ro
def get_risk_color(category):
    if category == "Th·∫•p":
        return "green"
    elif category == "Trung b√¨nh":
        return "orange"
    elif category == "Cao":
        return "red"
    else:  # R·∫•t cao
        return "darkred"


# H√†m t·∫°o ƒëi·ªÉm s·ªë r·ªßi ro d·∫°ng ƒë·ªìng h·ªì
def create_gauge_chart(risk_score):
    fig, ax = plt.subplots(figsize=(6, 4))

    # Create gauge angles and colors
    gauge_angles = np.linspace(0, 180, 100)
    gauge_radii = [0.8] * 100

    # Background color for each risk category
    gauge_colors = []
    for angle in gauge_angles:
        score = angle / 180 * 100
        if score < 20:
            gauge_colors.append('green')
        elif score < 50:
            gauge_colors.append('orange')
        elif score < 80:
            gauge_colors.append('red')
        else:
            gauge_colors.append('darkred')

    # Plot gauge background
    ax.scatter(gauge_angles, gauge_radii, c=gauge_colors, s=100, alpha=0.5)

    # Plot needle
    needle_angle = risk_score * 180 / 100
    ax.plot([0, needle_angle], [0, 0.7], 'k-', linewidth=3)
    ax.add_patch(plt.Circle((0, 0), 0.1, color='black'))

    # Add gauge labels
    ax.text(0, -0.2, '0', fontsize=10, ha='center')
    ax.text(45, -0.2, '25', fontsize=10, ha='center')
    ax.text(90, -0.2, '50', fontsize=10, ha='center')
    ax.text(135, -0.2, '75', fontsize=10, ha='center')
    ax.text(180, -0.2, '100', fontsize=10, ha='center')

    # Add risk category labels
    ax.text(10, 1.0, 'Th·∫•p', fontsize=10, ha='center', color='green', fontweight='bold')
    ax.text(65, 1.0, 'TB', fontsize=10, ha='center', color='orange', fontweight='bold')
    ax.text(115, 1.0, 'Cao', fontsize=10, ha='center', color='red', fontweight='bold')
    ax.text(160, 1.0, 'R·∫•t cao', fontsize=10, ha='center', color='darkred', fontweight='bold')

    # Set limits and customize
    ax.set_ylim(0, 1.2)
    ax.set_xlim(0, 180)
    ax.set_xticks([])
    ax.set_yticks([])
    ax.set_title('M·ª©c ƒë·ªô r·ªßi ro', fontsize=12)

    # Remove spines
    for spine in ax.spines.values():
        spine.set_visible(False)

    plt.tight_layout()
    return fig


# TRANG 1: T·ªîNG QUAN
if app_mode == "T·ªïng quan":
    st.header("T·ªîNG QUAN H·ªÜ TH·ªêNG")

    # Gi·ªõi thi·ªáu
    col1, col2 = st.columns([2, 1])

    with col1:
        st.markdown("""
        ### Gi·ªõi thi·ªáu

        H·ªá th·ªëng ph√°t hi·ªán gian l·∫≠n v√† ƒë√°nh gi√° r·ªßi ro s·ª≠ d·ª•ng tr√≠ tu·ªá nh√¢n t·∫°o ƒë·ªÉ:

        1. **Ph√°t hi·ªán gian l·∫≠n**: S·ª≠ d·ª•ng m√¥ h√¨nh h·ªçc m√°y d·ª± ƒëo√°n kh·∫£ nƒÉng gian l·∫≠n c·ªßa giao d·ªãch
        2. **ƒê√°nh gi√° r·ªßi ro**: Ph√¢n lo·∫°i giao d·ªãch theo m·ª©c ƒë·ªô r·ªßi ro
        3. **ƒê·ªÅ xu·∫•t h√†nh ƒë·ªông**: ƒê∆∞a ra h∆∞·ªõng d·∫´n x·ª≠ l√Ω ph√π h·ª£p v·ªõi m·ª©c ƒë·ªô r·ªßi ro

        ### ·ª®ng d·ª•ng
        - Ph√°t hi·ªán gian l·∫≠n thanh to√°n th·∫ª
        - Ki·ªÉm so√°t giao d·ªãch tr·ª±c tuy·∫øn
        - Ph√≤ng ch·ªëng r·ª≠a ti·ªÅn
        - B·∫£o v·ªá t√†i kho·∫£n ng∆∞·ªùi d√πng
        """)

    with col2:
        st.markdown("""
        ### Danh m·ª•c r·ªßi ro
        """)

        risk_data = {
            'Danh m·ª•c': ['Th·∫•p', 'Trung b√¨nh', 'Cao', 'R·∫•t cao'],
            'ƒêi·ªÉm s·ªë': ['0-20', '21-50', '51-80', '81-100'],
            'H√†nh ƒë·ªông': ['T·ª± ƒë·ªông', 'X√°c th·ª±c b·ªï sung', 'Ki·ªÉm tra th·ªß c√¥ng', 'T·∫°m d·ª´ng']
        }
        risk_df = pd.DataFrame(risk_data)


        # Th√™m c·ªôt CSS style
        def apply_risk_style(row):
            category = row['Danh m·ª•c']
            color = get_risk_color(category)
            return [f'background-color: {color}; color: white; font-weight: bold' for _ in range(len(row))]

        def apply_action_style(row):
            return ['font-weight: bold' for _ in range(len(row))]

        # Hi·ªÉn th·ªã b·∫£ng r·ªßi ro v·ªõi m√†u s·∫Øc
        st.dataframe(risk_df.style.apply(
            apply_action_style, axis=1, subset=['H√†nh ƒë·ªông']
        ).apply(apply_risk_style, axis=1, subset=['Danh m·ª•c']))

    # Th√¥ng tin m√¥ h√¨nh
    st.markdown("---")
    st.subheader("Th√¥ng tin m√¥ h√¨nh")

    col1, col2, col3 = st.columns(3)

    with col1:
        st.metric(label="ƒê·ªô ch√≠nh x√°c", value="97.8%")
    with col2:
        st.metric(label="AUC", value="0.985")
    with col3:
        st.metric(label="Th·ªùi gian x·ª≠ l√Ω", value="~3ms/giao d·ªãch")

    # Ki·∫øn tr√∫c h·ªá th·ªëng
    st.markdown("---")
    st.subheader("Ki·∫øn tr√∫c h·ªá th·ªëng")

    col1, col2 = st.columns([3, 2])

    with col1:
        st.markdown("""
        1. **Thu th·∫≠p d·ªØ li·ªáu giao d·ªãch**: D·ªØ li·ªáu t·ª´ nhi·ªÅu ngu·ªìn ƒë∆∞·ª£c t·ªïng h·ª£p
        2. **Ti·ªÅn x·ª≠ l√Ω & L√†m s·∫°ch**: Chu·∫©n h√≥a v√† lo·∫°i b·ªè nhi·ªÖu d·ªØ li·ªáu
        3. **T·∫°o ƒë·∫∑c tr∆∞ng**: X√¢y d·ª±ng c√°c ƒë·∫∑c tr∆∞ng c√≥ gi√° tr·ªã d·ª± ƒëo√°n
        4. **M√¥ h√¨nh ph√°t hi·ªán gian l·∫≠n**: S·ª≠ d·ª•ng thu·∫≠t to√°n h·ªçc m√°y d·ª± ƒëo√°n kh·∫£ nƒÉng gian l·∫≠n
        5. **H·ªá th·ªëng ƒë√°nh gi√° r·ªßi ro**: Chuy·ªÉn ƒë·ªïi x√°c su·∫•t th√†nh ƒëi·ªÉm r·ªßi ro v√† ph√¢n lo·∫°i
        6. **Quy tr√¨nh x·ª≠ l√Ω giao d·ªãch**: T·ª± ƒë·ªông h√≥a quy·∫øt ƒë·ªãnh d·ª±a tr√™n m·ª©c ƒë·ªô r·ªßi ro
        """)

    with col2:
        # Bi·ªÉu ƒë·ªì ph√¢n b·ªë r·ªßi ro
        risk_dist_img = load_image('risk_distribution.png')
        if risk_dist_img:
            st.image(risk_dist_img, caption="Ph√¢n b·ªë danh m·ª•c r·ªßi ro", use_container_width=True)

# TRANG 2: PH√ÇN T√çCH D·ªÆ LI·ªÜU
elif app_mode == "Ph√¢n t√≠ch d·ªØ li·ªáu":
    st.header("PH√ÇN T√çCH D·ªÆ LI·ªÜU")

    # T·∫£i d·ªØ li·ªáu
    results = load_results()

    if results is not None:
        # Th√¥ng tin c∆° b·∫£n
        st.subheader("Th√¥ng tin t·ªïng quan")

        col1, col2, col3, col4 = st.columns(4)

        total_transactions = len(results)
        total_frauds = results['actual'].sum()
        fraud_percent = total_frauds / total_transactions * 100

        with col1:
            st.metric(label="T·ªïng s·ªë giao d·ªãch", value=f"{total_transactions:,}")
        with col2:
            st.metric(label="Giao d·ªãch gian l·∫≠n", value=f"{total_frauds:,}")
        with col3:
            st.metric(label="T·ª∑ l·ªá gian l·∫≠n", value=f"{fraud_percent:.2f}%")
        with col4:
            st.metric(label="S·ªë danh m·ª•c r·ªßi ro", value="4")

        # Ph√¢n b·ªë r·ªßi ro
        st.markdown("---")
        st.subheader("Ph√¢n b·ªë r·ªßi ro")

        col1, col2 = st.columns(2)

        with col1:
            # Bi·ªÉu ƒë·ªì ph√¢n b·ªë danh m·ª•c r·ªßi ro
            risk_dist_img = load_image('risk_distribution.png')
            if risk_dist_img:
                st.image(risk_dist_img, caption="Ph√¢n b·ªë danh m·ª•c r·ªßi ro", use_container_width=True)

        with col2:
            # Bi·ªÉu ƒë·ªì t·ª∑ l·ªá gian l·∫≠n theo danh m·ª•c
            fraud_rate_img = load_image('fraud_rate_by_risk.png')
            if fraud_rate_img:
                st.image(fraud_rate_img, caption="T·ª∑ l·ªá gian l·∫≠n theo danh m·ª•c r·ªßi ro", use_container_width=True)

        # ƒê√°nh gi√° m√¥ h√¨nh
        st.markdown("---")
        st.subheader("ƒê√°nh gi√° m√¥ h√¨nh")

        col1, col2 = st.columns(2)

        with col1:
            # ƒê∆∞·ªùng cong ROC
            roc_img = load_image('roc_curves.png')
            if roc_img:
                st.image(roc_img, caption="ƒê∆∞·ªùng cong ROC", use_container_width=True)

        with col2:
            # Ma tr·∫≠n nh·∫ßm l·∫´n
            cm_img = load_image('confusion_matrices.png')
            if cm_img:
                st.image(cm_img, caption="Ma tr·∫≠n nh·∫ßm l·∫´n", use_container_width=True)

        # ƒê·∫∑c tr∆∞ng quan tr·ªçng
        st.markdown("---")
        st.subheader("ƒê·∫∑c tr∆∞ng quan tr·ªçng")

        feature_img = load_image('xgb_feature_importance.png')
        if feature_img:
            st.image(feature_img, caption="Top ƒë·∫∑c tr∆∞ng quan tr·ªçng nh·∫•t", use_container_width=True)

    else:
        st.warning("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu k·∫øt qu·∫£. Vui l√≤ng ch·∫°y c√°c script x·ª≠ l√Ω tr∆∞·ªõc!")

# TRANG 3: M·∫™U GIAO D·ªäCH
elif app_mode == "M·∫´u giao d·ªãch":
    st.header("M·∫™U GIAO D·ªäCH")

    # T·∫£i d·ªØ li·ªáu m·∫´u
    samples = load_demo_samples()

    if samples is not None:
        # Ki·ªÉm tra t√™n c·ªôt
        st.write("C√°c c·ªôt c√≥ trong d·ªØ li·ªáu m·∫´u:")
        st.write(samples.columns.tolist())
        
        # ƒê·∫£m b·∫£o c√≥ c·ªôt 'probability' ho·∫∑c 'fraud_probability'
        if 'probability' in samples.columns and 'fraud_probability' not in samples.columns:
            samples['fraud_probability'] = samples['probability']
        elif 'fraud_probability' not in samples.columns and 'probability' not in samples.columns:
            # T·∫°o c·ªôt m·ªõi n·∫øu c·∫£ hai ƒë·ªÅu kh√¥ng t·ªìn t·∫°i
            if 'predicted' in samples.columns:
                samples['fraud_probability'] = samples['predicted'].apply(lambda x: 0.9 if x == 1 else 0.1)
            else:
                samples['fraud_probability'] = 0.1  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh

        # B·ªô l·ªçc
        st.subheader("B·ªô l·ªçc")

        col1, col2, col3 = st.columns(3)

        with col1:
            selected_risk = st.multiselect(
                "Danh m·ª•c r·ªßi ro",
                ["Th·∫•p", "Trung b√¨nh", "Cao", "R·∫•t cao"],
                default=["Th·∫•p", "Trung b√¨nh", "Cao", "R·∫•t cao"]
            )

        with col2:
            selected_fraud = st.multiselect(
                "Nh√£n th·ª±c t·∫ø",
                [0, 1],
                default=[0, 1],
                format_func=lambda x: "Gian l·∫≠n" if x == 1 else "H·ª£p ph√°p"
            )

        with col3:
            selected_pred = st.multiselect(
                "D·ª± ƒëo√°n",
                [0, 1],
                default=[0, 1],
                format_func=lambda x: "Gian l·∫≠n" if x == 1 else "H·ª£p ph√°p"
            )

        # L·ªçc d·ªØ li·ªáu
        filtered_samples = samples[
            samples['risk_category'].isin(selected_risk) &
            samples['actual'].isin(selected_fraud) &
            samples['predicted'].isin(selected_pred)
            ]

        # Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng k·∫øt qu·∫£
        st.write(f"Hi·ªÉn th·ªã {len(filtered_samples)} giao d·ªãch")

        # Hi·ªÉn th·ªã danh s√°ch giao d·ªãch
        if not filtered_samples.empty:
            st.subheader("Danh s√°ch giao d·ªãch")

            # Hi·ªÉn th·ªã d∆∞·ªõi d·∫°ng b·∫£ng
            st.dataframe(filtered_samples.style.apply(
                lambda row: [
                    f'background-color: {"lightgreen" if row["actual"] == 0 else "lightcoral"}'
                    for _ in range(len(row))
                ], axis=1
            ))

            # Ch·ªçn giao d·ªãch ƒë·ªÉ xem chi ti·∫øt
            selected_index = st.selectbox(
                "Ch·ªçn giao d·ªãch ƒë·ªÉ xem chi ti·∫øt",
                range(len(filtered_samples)),
                format_func=lambda i: f"Giao d·ªãch {i + 1} (Risk: {filtered_samples.iloc[i]['risk_category']})"
            )

            # Hi·ªÉn th·ªã chi ti·∫øt giao d·ªãch ƒë√£ ch·ªçn
            if selected_index is not None:
                st.markdown("---")
                st.subheader("Chi ti·∫øt giao d·ªãch")

                selected_transaction = filtered_samples.iloc[selected_index]

                col1, col2 = st.columns([2, 1])

                with col1:
                    # Th√¥ng tin c∆° b·∫£n
                    st.markdown("### Th√¥ng tin ƒë√°nh gi√°")

                    risk_score = selected_transaction['risk_score']
                    risk_category = selected_transaction['risk_category']
                    
                    # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p kh√¥ng c√≥ fraud_probability
                    if 'fraud_probability' in selected_transaction:
                        fraud_prob = selected_transaction['fraud_probability']
                    elif 'probability' in selected_transaction:
                        fraud_prob = selected_transaction['probability']
                    else:
                        fraud_prob = 0.1  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh
                        
                    actual = "Gian l·∫≠n" if selected_transaction['actual'] == 1 else "H·ª£p ph√°p"
                    predicted = "Gian l·∫≠n" if selected_transaction['predicted'] == 1 else "H·ª£p ph√°p"

                    metrics_col1, metrics_col2, metrics_col3 = st.columns(3)

                    with metrics_col1:
                        st.metric("ƒêi·ªÉm r·ªßi ro", f"{risk_score:.1f}")
                    with metrics_col2:
                        st.metric("Danh m·ª•c r·ªßi ro", risk_category)
                    with metrics_col3:
                        st.metric("X√°c su·∫•t gian l·∫≠n", f"{fraud_prob:.1%}")

                    result_col1, result_col2 = st.columns(2)

                    with result_col1:
                        st.metric("Th·ª±c t·∫ø", actual)
                    with result_col2:
                        st.metric("D·ª± ƒëo√°n", predicted)

                    # H√†nh ƒë·ªông ƒë·ªÅ xu·∫•t
                    st.markdown("### H√†nh ƒë·ªông ƒë·ªÅ xu·∫•t")

                    if risk_category == "Th·∫•p":
                        st.success("‚úÖ Cho ph√©p giao d·ªãch t·ª± ƒë·ªông")
                        st.write("Giao d·ªãch c√≥ r·ªßi ro th·∫•p, c√≥ th·ªÉ ƒë∆∞·ª£c x·ª≠ l√Ω t·ª± ƒë·ªông m√† kh√¥ng c·∫ßn th√™m x√°c th·ª±c.")
                    elif risk_category == "Trung b√¨nh":
                        st.warning("‚ö†Ô∏è Y√™u c·∫ßu x√°c th·ª±c b·ªï sung")
                        st.write("Y√™u c·∫ßu kh√°ch h√†ng x√°c th·ª±c th√™m b·∫±ng OTP ho·∫∑c sinh tr·∫Øc h·ªçc.")
                    elif risk_category == "Cao":
                        st.error("üö® Ki·ªÉm tra th·ªß c√¥ng")
                        st.write("Chuy·ªÉn giao d·ªãch cho nh√¢n vi√™n ki·ªÉm tra tr∆∞·ªõc khi x·ª≠ l√Ω.")
                    else:  # R·∫•t cao
                        st.error("üõë T·∫°m d·ª´ng giao d·ªãch")
                        st.write("T·∫°m d·ª´ng giao d·ªãch v√† li√™n h·ªá v·ªõi kh√°ch h√†ng ƒë·ªÉ x√°c minh.")

                with col2:
                    # ƒê·ªìng h·ªì ƒëo r·ªßi ro
                    st.markdown("### ƒê·ªìng h·ªì ƒëo r·ªßi ro")
                    gauge_fig = create_gauge_chart(risk_score)
                    st.pyplot(gauge_fig)

                    # Tr·∫°ng th√°i
                    st.markdown("### Tr·∫°ng th√°i")

                    if actual == predicted:
                        if actual == "Gian l·∫≠n":
                            st.success("‚úÖ True Positive: Ph√°t hi·ªán ch√≠nh x√°c giao d·ªãch gian l·∫≠n")
                        else:
                            st.success("‚úÖ True Negative: X√°c ƒë·ªãnh ch√≠nh x√°c giao d·ªãch h·ª£p ph√°p")
                    else:
                        if predicted == "Gian l·∫≠n":
                            st.error("‚ùå False Positive: C·∫£nh b√°o sai v·ªÅ giao d·ªãch h·ª£p ph√°p")
                        else:
                            st.error("‚ùå False Negative: B·ªè s√≥t giao d·ªãch gian l·∫≠n")
        else:
            st.warning("Kh√¥ng c√≥ giao d·ªãch n√†o kh·ªõp v·ªõi ƒëi·ªÅu ki·ªán l·ªçc")

    else:
        st.warning("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu m·∫´u. Vui l√≤ng ch·∫°y c√°c script x·ª≠ l√Ω tr∆∞·ªõc!")

# TRANG 4: ƒê√ÅNH GI√Å TH·ª¶ C√îNG
elif app_mode == "ƒê√°nh gi√° th·ªß c√¥ng":
    st.header("ƒê√ÅNH GI√Å GIAO D·ªäCH TH·ª¶ C√îNG")

    # Ki·ªÉm tra m√¥ h√¨nh ƒë√£ t·∫£i hay ch∆∞a
    if model is None or preprocessor is None or risk_system is None:
        st.error("Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh ho·∫∑c b·ªô ti·ªÅn x·ª≠ l√Ω. Vui l√≤ng ch·∫°y c√°c script x·ª≠ l√Ω tr∆∞·ªõc!")
        st.stop()

    # Form nh·∫≠p th√¥ng tin giao d·ªãch
    with st.form("transaction_form"):
        st.subheader("Nh·∫≠p th√¥ng tin giao d·ªãch")

        # ƒê·ªãnh nghƒ©a c√°c mapping
        day_of_week_map = {
            "Th·ª© Hai": 0, "Th·ª© Ba": 1, "Th·ª© T∆∞": 2, "Th·ª© NƒÉm": 3,
            "Th·ª© S√°u": 4, "Th·ª© B·∫£y": 5, "Ch·ªß Nh·∫≠t": 6
        }

        transaction_type_map = {
            "Mua s·∫Øm tr·ª±c tuy·∫øn": 0, "R√∫t ti·ªÅn ATM": 1,
            "Thanh to√°n t·∫°i POS": 2, "Chuy·ªÉn kho·∫£n": 3, "Kh√°c": 4
        }

        # ƒê√¢y l√† v√≠ d·ª•, b·∫°n c·∫ßn thay ƒë·ªïi c√°c tr∆∞·ªùng nh·∫≠p li·ªáu theo ƒë·∫∑c tr∆∞ng th·ª±c t·∫ø c·ªßa m√¥ h√¨nh
        col1, col2, col3 = st.columns(3)

        with col1:
            amount = st.number_input("S·ªë ti·ªÅn giao d·ªãch", min_value=0.0, value=100.0)
            transaction_hour = st.slider("Gi·ªù giao d·ªãch", 0, 23, 12)
            transaction_day = st.selectbox(
                "Ng√†y trong tu·∫ßn",
                options=["Th·ª© Hai", "Th·ª© Ba", "Th·ª© T∆∞", "Th·ª© NƒÉm", "Th·ª© S√°u", "Th·ª© B·∫£y", "Ch·ªß Nh·∫≠t"],
                index=0
            )

        with col2:
            card_type = st.selectbox(
                "Lo·∫°i th·∫ª",
                options=["Visa", "Mastercard", "Amex", "Kh√°c"],
                index=0
            )
            merchant_category = st.selectbox(
                "Danh m·ª•c ng∆∞·ªùi b√°n",
                options=["B√°n l·∫ª", "ƒÇn u·ªëng", "Du l·ªãch", "Gi·∫£i tr√≠", "D·ªãch v·ª•", "Kh√°c"],
                index=0
            )
            is_foreign_transaction = st.checkbox("Giao d·ªãch qu·ªëc t·∫ø")

        with col3:
            customer_age = st.slider("Tu·ªïi kh√°ch h√†ng", 18, 90, 35)
            distance_from_home = st.number_input("Kho·∫£ng c√°ch t·ª´ nh√† (km)", min_value=0.0, value=5.0)
            transaction_type = st.selectbox(
                "Lo·∫°i giao d·ªãch",
                options=["Mua s·∫Øm tr·ª±c tuy·∫øn", "R√∫t ti·ªÅn ATM", "Thanh to√°n t·∫°i POS", "Chuy·ªÉn kho·∫£n", "Kh√°c"],
                index=0
            )
            amount_multiplier = st.slider(
                "H·ªá s·ªë ·∫£nh h∆∞·ªüng c·ªßa s·ªë ti·ªÅn", 
                min_value=0.5, 
                max_value=5.0, 
                value=1.0, 
                step=0.1,
                help="ƒêi·ªÅu ch·ªânh m·ª©c ƒë·ªô ·∫£nh h∆∞·ªüng c·ªßa s·ªë ti·ªÅn ƒë·∫øn x√°c su·∫•t gian l·∫≠n (cao h∆°n = ·∫£nh h∆∞·ªüng m·∫°nh h∆°n)"
            )

        submit_button = st.form_submit_button("ƒê√°nh gi√° r·ªßi ro")

    # X·ª≠ l√Ω khi nh·∫•n n√∫t ƒë√°nh gi√°
    if submit_button:
        try:
            # Chuy·ªÉn ƒë·ªïi c√°c gi√° tr·ªã t·ª´ form sang d·∫°ng th√≠ch h·ª£p
            day_num = day_of_week_map[transaction_day]
            transaction_type_num = transaction_type_map[transaction_type]
            
            # L·∫•y m√£ s·ªë merchant category d·ª±a tr√™n lo·∫°i h√¨nh
            merchant_category_map = {
                "B√°n l·∫ª": 5411, 
                "ƒÇn u·ªëng": 5812, 
                "Du l·ªãch": 4511, 
                "Gi·∫£i tr√≠": 7832, 
                "D·ªãch v·ª•": 7299, 
                "Kh√°c": 9999
            }
            mcc_code = merchant_category_map.get(merchant_category, 9999)
            
            # T·∫°o gi√° tr·ªã merchant ID d·ª±a tr√™n merchant category v√† tr·∫°ng th√°i giao d·ªãch qu·ªëc t·∫ø
            merchant_id_base = mcc_code * 10
            merchant_id = merchant_id_base + (1 if is_foreign_transaction else 0)
            
            # M√£ h√≥a lo·∫°i th·∫ª th√†nh s·ªë
            card_type_map = {"Visa": 1, "Mastercard": 2, "Amex": 3, "Kh√°c": 4}
            card_id = card_type_map.get(card_type, 1) * 1000 + customer_age
            
            # T√≠nh zip code d·ª±a tr√™n kho·∫£ng c√°ch
            zip_code = 10000 + int(distance_from_home * 10)
            
            # Ph√¢n t√≠ch c√≥ l·ªói hay kh√¥ng d·ª±a tr√™n c√°c y·∫øu t·ªë r·ªßi ro
            error_code = "0"  # Kh√¥ng c√≥ l·ªói
            if is_foreign_transaction and amount > 1000:
                error_code = "1"  # C√≥ d·∫•u hi·ªáu r·ªßi ro
            
            # M√£ h√≥a th√†nh ph·ªë v√† qu·ªëc gia d·ª±a tr√™n is_foreign_transaction
            merchant_city = "Foreign City" if is_foreign_transaction else "HCM"
            merchant_state = "XX" if is_foreign_transaction else "VN"
            
            # T·∫°o d·ªØ li·ªáu ƒë·∫ßu v√†o v·ªõi ki·ªÉu d·ªØ li·ªáu ph√π h·ª£p
            data = {
                # Numeric features - chuy·ªÉn ƒë·ªïi th√†nh float
                'client_id': float(customer_age * 100 + day_num),  # ID kh√°ch h√†ng d·ª±a tr√™n tu·ªïi v√† ng√†y
                'card_id': float(card_id),
                'merchant_id': float(merchant_id),
                'zip': float(zip_code),
                'mcc': float(mcc_code),
                'amount': float(amount * amount_multiplier),  # √Åp d·ª•ng h·ªá s·ªë ·∫£nh h∆∞·ªüng c·ªßa s·ªë ti·ªÅn

                # Categorical features - gi·ªØ nguy√™n d·∫°ng string
                'date': f"2024-01-0{day_num+1}",  # Ng√†y d·ª±a tr√™n ng√†y trong tu·∫ßn
                'use_chip': '1' if card_type in ["Visa", "Mastercard"] else '0',  # Gi·∫£ ƒë·ªãnh th·∫ª Visa/Mastercard d√πng chip
                'merchant_city': merchant_city,
                'merchant_state': merchant_state,
                'errors': error_code
            }
            
            # T·∫°o DataFrame v·ªõi ki·ªÉu d·ªØ li·ªáu r√µ r√†ng
            transaction_data = pd.DataFrame([data])
            
            # ƒê·∫£m b·∫£o ki·ªÉu d·ªØ li·ªáu ch√≠nh x√°c
            for col in ['client_id', 'card_id', 'merchant_id', 'zip', 'mcc', 'amount']:
                if col in transaction_data.columns:
                    transaction_data[col] = transaction_data[col].astype(float)
            
            for col in ['date', 'use_chip', 'merchant_city', 'merchant_state', 'errors']:
                if col in transaction_data.columns:
                    transaction_data[col] = transaction_data[col].astype(str)

            # Th·ª±c hi·ªán ƒë√°nh gi√° r·ªßi ro
            st.info("ƒêang ƒë√°nh gi√° r·ªßi ro...")
            evaluation = evaluate_risk(transaction_data)

            if evaluation is not None:
                st.success("ƒê√°nh gi√° ho√†n t·∫•t!")
                st.markdown("---")

                # Hi·ªÉn th·ªã k·∫øt qu·∫£ ƒë√°nh gi√°
                st.subheader("K·∫øt qu·∫£ ƒë√°nh gi√° r·ªßi ro")

                risk_score = evaluation['risk_score'].iloc[0]
                risk_category = evaluation['risk_category'].iloc[0]

                # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p kh√¥ng c√≥ fraud_probability
                if 'fraud_probability' in evaluation.columns:
                    fraud_prob = evaluation['fraud_probability'].iloc[0]
                elif 'probability' in evaluation.columns:
                    fraud_prob = evaluation['probability'].iloc[0]
                else:
                    fraud_prob = 0.15  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh

                fraud_pred = evaluation['predicted_fraud'].iloc[0]

                col1, col2 = st.columns([2, 1])

                with col1:
                    # Th√¥ng tin c∆° b·∫£n
                    st.markdown("### Th√¥ng tin ƒë√°nh gi√°")

                    metrics_col1, metrics_col2, metrics_col3 = st.columns(3)

                    with metrics_col1:
                        st.metric("ƒêi·ªÉm r·ªßi ro", f"{risk_score:.1f}")
                    with metrics_col2:
                        st.metric("Danh m·ª•c r·ªßi ro", risk_category)
                    with metrics_col3:
                        st.metric("X√°c su·∫•t gian l·∫≠n", f"{fraud_prob:.1%}")

                    # H√†nh ƒë·ªông ƒë·ªÅ xu·∫•t
                    st.markdown("### H√†nh ƒë·ªông ƒë·ªÅ xu·∫•t")

                    if risk_category == "Th·∫•p":
                        st.success("‚úÖ Cho ph√©p giao d·ªãch t·ª± ƒë·ªông")
                        st.write("Giao d·ªãch c√≥ r·ªßi ro th·∫•p, c√≥ th·ªÉ ƒë∆∞·ª£c x·ª≠ l√Ω t·ª± ƒë·ªông m√† kh√¥ng c·∫ßn th√™m x√°c th·ª±c.")
                    elif risk_category == "Trung b√¨nh":
                        st.warning("‚ö†Ô∏è Y√™u c·∫ßu x√°c th·ª±c b·ªï sung")
                        st.write("Y√™u c·∫ßu kh√°ch h√†ng x√°c th·ª±c th√™m b·∫±ng OTP ho·∫∑c sinh tr·∫Øc h·ªçc.")
                    elif risk_category == "Cao":
                        st.error("üö® Ki·ªÉm tra th·ªß c√¥ng")
                        st.write("Chuy·ªÉn giao d·ªãch cho nh√¢n vi√™n ki·ªÉm tra tr∆∞·ªõc khi x·ª≠ l√Ω.")
                    else:  # R·∫•t cao
                        st.error("üõë T·∫°m d·ª´ng giao d·ªãch")
                        st.write("T·∫°m d·ª´ng giao d·ªãch v√† li√™n h·ªá v·ªõi kh√°ch h√†ng ƒë·ªÉ x√°c minh.")

                with col2:
                    # ƒê·ªìng h·ªì ƒëo r·ªßi ro
                    st.markdown("### ƒê·ªìng h·ªì ƒëo r·ªßi ro")
                    gauge_fig = create_gauge_chart(risk_score)
                    st.pyplot(gauge_fig)

                    # D·ª± ƒëo√°n
                    st.markdown("### K·∫øt lu·∫≠n")
                    if fraud_pred == 1:
                        st.error("‚ö†Ô∏è C√≥ d·∫•u hi·ªáu gian l·∫≠n")
                    else:
                        st.success("‚úì Kh√¥ng ph√°t hi·ªán d·∫•u hi·ªáu gian l·∫≠n")
                        
                # Hi·ªÉn th·ªã th√¥ng tin th√™m v·ªÅ giao d·ªãch
                st.markdown("---")
                st.subheader("Th√¥ng tin giao d·ªãch")
                st.write(f"S·ªë ti·ªÅn: {amount:,.2f} USD")
                st.write(f"Th·ªùi gian: {transaction_hour}:00, {transaction_day}")
                st.write(f"Lo·∫°i th·∫ª: {card_type}")
                st.write(f"Danh m·ª•c: {merchant_category}")
                st.write(f"Giao d·ªãch qu·ªëc t·∫ø: {'C√≥' if is_foreign_transaction else 'Kh√¥ng'}")
                
        except Exception as e:
            st.error(f"L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu: {e}")
            import traceback
            st.write("Chi ti·∫øt l·ªói:", traceback.format_exc())

# TRANG 5: H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG
else:  # H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
    st.header("H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG")

    st.markdown("""
    ### Gi·ªõi thi·ªáu

    H·ªá th·ªëng ph√°t hi·ªán gian l·∫≠n v√† ƒë√°nh gi√° r·ªßi ro cung c·∫•p c√°c ch·ª©c nƒÉng sau:

    1. **T·ªïng quan**: Th√¥ng tin c∆° b·∫£n v·ªÅ h·ªá th·ªëng v√† ki·∫øn tr√∫c
    2. **Ph√¢n t√≠ch d·ªØ li·ªáu**: Bi·ªÉu ƒë·ªì v√† ƒë√°nh gi√° hi·ªáu su·∫•t m√¥ h√¨nh
    3. **M·∫´u giao d·ªãch**: Xem v√† ph√¢n t√≠ch c√°c giao d·ªãch m·∫´u
    4. **ƒê√°nh gi√° th·ªß c√¥ng**: Nh·∫≠p th√¥ng tin giao d·ªãch v√† xem k·∫øt qu·∫£ ƒë√°nh gi√°

    ### S·ª≠ d·ª•ng c√°c t√≠nh nƒÉng

    #### 1. Ph√¢n t√≠ch d·ªØ li·ªáu
    - Xem c√°c s·ªë li·ªáu t·ªïng quan v·ªÅ m√¥ h√¨nh
    - Ph√¢n t√≠ch bi·ªÉu ƒë·ªì ph√¢n b·ªë r·ªßi ro v√† t·ª∑ l·ªá gian l·∫≠n
    - Ki·ªÉm tra hi·ªáu su·∫•t m√¥ h√¨nh th√¥ng qua ƒë∆∞·ªùng cong ROC v√† ma tr·∫≠n nh·∫ßm l·∫´n
    - Xem c√°c ƒë·∫∑c tr∆∞ng quan tr·ªçng nh·∫•t

    #### 2. M·∫´u giao d·ªãch
    - L·ªçc giao d·ªãch theo danh m·ª•c r·ªßi ro, nh√£n th·ª±c t·∫ø v√† d·ª± ƒëo√°n
    - Xem chi ti·∫øt t·ª´ng giao d·ªãch v·ªõi ƒë√°nh gi√° r·ªßi ro v√† ƒë·ªÅ xu·∫•t h√†nh ƒë·ªông
    - Ph√¢n t√≠ch tr·∫°ng th√°i ph√¢n lo·∫°i (True Positive, False Positive, ...)

    #### 3. ƒê√°nh gi√° th·ªß c√¥ng
    - Nh·∫≠p th√¥ng tin giao d·ªãch m·ªõi
    - Nh·∫≠n k·∫øt qu·∫£ ƒë√°nh gi√° r·ªßi ro v√† ƒë·ªÅ xu·∫•t h√†nh ƒë·ªông
    - Xem tr·ª±c quan h√≥a ƒëi·ªÉm r·ªßi ro qua ƒë·ªìng h·ªì ƒëo

    ### Quy tr√¨nh x·ª≠ l√Ω giao d·ªãch d·ª±a tr√™n m·ª©c ƒë·ªô r·ªßi ro

    1. **R·ªßi ro th·∫•p (0-20)**: Cho ph√©p giao d·ªãch t·ª± ƒë·ªông
    2. **R·ªßi ro trung b√¨nh (21-50)**: Y√™u c·∫ßu x√°c th·ª±c th√™m (OTP, biometric)
    3. **R·ªßi ro cao (51-80)**: Chuy·ªÉn cho nh√¢n vi√™n ki·ªÉm tra th·ªß c√¥ng
    4. **R·ªßi ro r·∫•t cao (81-100)**: T·∫°m d·ª´ng giao d·ªãch v√† li√™n h·ªá kh√°ch h√†ng

    ### Li√™n h·ªá h·ªó tr·ª£

    N·∫øu c√≥ b·∫•t k·ª≥ c√¢u h·ªèi ho·∫∑c y√™u c·∫ßu h·ªó tr·ª£ n√†o, vui l√≤ng li√™n h·ªá:
    - Email: phamngocthaison@gmail.com
    - Hotline: (84) 938746562
    """)

# Footer
st.markdown("---")
st.markdown("""
<div style="text-align: center">
    <p>¬© 2025 H·ªá th·ªëng ph√°t hi·ªán gian l·∫≠n v√† ƒë√°nh gi√° r·ªßi ro</p>
    <p>Phi√™n b·∫£n 1.0.0 - Nh√≥m 22 - </p>
</div>
""", unsafe_allow_html=True)